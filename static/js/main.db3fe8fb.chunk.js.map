{"version":3,"sources":["components/Bookmark.js","components/BookList.js","components/AddBookmark.js","components/Title.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Bookmark","className","this","props","bookmarks","map","element","index","key","href","target","onClick","editHandler","bind","deleteHandler","Component","BookList","formDivStyle","display","displayForm","AddBookmark","handleSubmit","e","preventDefault","addItem","title_text","link_text","state","style","onSubmit","type","name","placeholder","id","required","value","onChange","handleChange","Title","Footer","useState","Date","date","setDate","useEffect","interval","setInterval","clearInterval","App","setState","console","log","getStoredLinks","i","window","localStorage","length","getItem","bookmarkItem","push","items","title","link","removeItem","setItem","toggleAddBookMarkForm","testv","toggleForm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db3fe8fb.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Bookmark extends Component {\n\n\n    render() {\n        return (\n            <div className=\"bookmarks\">\n                {\n                    this.props.bookmarks.map((element, index) => <div className=\"bookmark-item\" key={index}>\n                        <div className=\"bookmark-item-container\">\n                            <div>\n                                <div>\n                                   <a href={element['link']} target=\"blank\" className=\"title\">{element['title']}</a>\n                                </div>\n                                <small>{element['link']}</small>\n                            </div>\n                            <div>\n                                <button className=\"edit\" onClick={this.props.editHandler.bind(this, element['title'], element['link'])}>Edit</button>\n                                <button className=\"delete\" onClick={this.props.deleteHandler.bind(this, element['title'], element['link'])}>Delete</button>\n                            </div>\n                        </div>\n\n                    </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default Bookmark\n","import React, { Component } from 'react'\nimport Bookmark from './Bookmark'\nclass BookList extends Component {\n\n    formDivStyle = {\n        display: this.props.displayForm ? \"flex\" : \"none\"\n    } \n\n    render() {\n\n        return (\n            <div className=\"bookmark-list\">\n                {/* <button className=\"add-bookmark\" onClick={this.props.toggleForm} >+Add Bookmark</button> */}\n                <h3>Simplified Bookmarks</h3>\n                <Bookmark bookmarks={this.props.bookmarks} deleteHandler={this.props.deleteHandler} editHandler={this.props.editHandler}/>\n            </div>\n        )\n    }\n}\nexport default BookList","import React, { Component } from 'react'\nclass AddBookmark extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            title_text: \"\",\n            link_text: \"\"\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        //alert(`${this.state.link} ${this.state.title}`)\n        //window.location.reload(false)\n        this.props.addItem(this.props.title_text, this.props.link_text)\n    }\n\n\n    formDivStyle = {\n        display: this.props.displayForm ? \"flex\" : \"none\"\n    } \n\n    render() {\n        return (\n            <div className=\"add-bookmark-container\" style={this.formDivStyle}>\n                <fieldset>\n                    <legend >Add Bookmark</legend>\n                    <form onSubmit={this.handleSubmit}>\n                        <input type=\"text\" name=\"title_text\" placeholder=\"enter bookmark title\" id=\"name\" required\n                            value={this.props.title_text} onChange={this.props.handleChange} />\n                        <br></br>\n                        <input type=\"text\" name=\"link_text\" placeholder=\"enter bookmark link\" id=\"link\" required\n                            value={this.props.link_text} onChange={this.props.handleChange} />\n                        <br></br>\n                        <input type=\"submit\" value=\"add bookmark\" />\n                    </form>\n                </fieldset>\n            </div>\n        )\n    }\n}\n\nexport default AddBookmark","import React from 'react'\n\nexport default function Title() {\n    return (\n        <div>\n            <h1>Store Bookmarks Locally</h1>\n        </div>\n    )\n}\n","import React ,{useState,useEffect} from 'react'\n\nexport default function Footer() {\n    const [date, setDate] = useState(Date())\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDate(Date)\n        }, 1000);\n       \n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n    return (\n        <div>\n            <small>{date}</small>\n        </div>\n    )\n    \n}\n\n// var setDate = () => {\n//     setInterval(() => {\n//         date = Date()\n//     }, 1000)\n// }\n\n","import React, { Component } from 'react'\nimport './App.css';\nimport './components/BookList'\nimport './components/styles.css'\nimport BookList from './components/BookList';\nimport AddBookMark from './components/AddBookmark'\nimport Title from './components/Title';\nimport Footer from './Footer';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: \"\",\n      link: \"\",\n      items: [],\n      displayForm: true,\n      testv:\"block\",\n      title_text: \"\",\n      link_text: \"\"\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n    console.log(e.target.value)\n  }\n\n   \n\n  getStoredLinks = () => {\n    let bookmarks = [];\n\n    for (var i = 0; i < window.localStorage.length; i++) {\n\n      // set iteration key name\n      var key = localStorage.key(i);\n\n      // use key name to retrieve the corresponding value\n      var value = localStorage.getItem(key);\n\n      // console.log the iteration key and value\n      console.log('Key: ' + key + ', Value: ' + value);\n      let bookmarkItem = {\n        \"title\": key,\n        \"link\": value,\n      }\n      bookmarks.push(bookmarkItem)\n    }\n    //localStorage.removeItem(\"j\")\n    console.log(bookmarks.length);\n\n    this.setState({\n      items: bookmarks\n    })\n  }\n\n\n  componentDidMount() {\n    this.getStoredLinks()\n  }\n\n  deleteHandler = (title, link) => {\n    localStorage.removeItem(title)\n    //console.log(\"kjhjhjh\")\n    // this.state.items({\n    //   \"title\": index,\n    //   \"link\": key,\n    // })\n    // this.setState({\n    //   items: this.state.items\n    // })\n\n    console.log(title, link)\n    this.getStoredLinks()\n  }\n\n  editHandler = (title, link) => {\n    this.setState({\n      link_text: link,\n      title_text: title\n    })\n  }\n\n  addItem = (title,link) => {\n    console.log(title)\n    window.localStorage.setItem(title, link);\n    this.getStoredLinks() \n\n    this.setState({\n      link_text: \"\",\n      title_text: \"\"\n    })\n  }\n\n  toggleAddBookMarkForm = () => {\n    this.setState({\n      displayForm: !this.state.displayForm,\n      testv:\"none\"\n    })\n  }\n\n  render() {\n    const bookmarks = this.state.items\n\n    return (\n      <div className=\"App\">\n        <Title/>\n        <AddBookMark addItem={this.addItem} displayForm={this.state.displayForm} title_text={this.state.title_text}\n        link_text={this.state.link_text} handleChange = {this.handleChange}/>\n        <BookList deleteHandler={this.deleteHandler} bookmarks={bookmarks} toggleForm={this.toggleAddBookMarkForm}\n        editHandler = {this.editHandler}/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}